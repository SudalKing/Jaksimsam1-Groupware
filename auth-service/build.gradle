plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'nu.studer.jooq' version '9.0'
}

group = 'com.jaksimsam1'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

bootJar {
    enabled = true
}

jar {
    enabled = false
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2024.0.0")
    set('jooqVersion', "3.19.19")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    /* R2DBC */
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'

    /* Postgresql */
    runtimeOnly 'org.postgresql:postgresql'

    /* Redis */
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'

    /* Lombok */
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    /* Spring Cloud */
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    /* Kafka */
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    /* Jooq */
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    /* Jooq Generator */
    jooqGenerator 'org.postgresql:postgresql'
    jooqGenerator "org.jooq:jooq:${jooqVersion}"
    jooqGenerator "org.jooq:jooq-codegen:${jooqVersion}"
    jooqGenerator "org.jooq:jooq-meta:${jooqVersion}"

    /* UUID */
    implementation 'com.fasterxml.uuid:java-uuid-generator:5.1.0'

    /* JWT */
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    /* Test */
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    runtimeOnly 'org.postgresql:r2dbc-postgresql'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    enabled = false
    useJUnitPlatform()
}

jooq {
    version("${jooqVersion}")

    configurations {
        create("main") {
            generationTool {
                jdbc {
                    driver = "org.postgresql.Driver"
                    url = System.getenv("AUTH_DB_URL") ?: "jdbc:postgresql://localhost:5433/auth"
                    user = System.getenv("AUTH_DB_USER") ?: "user"
                    password = System.getenv("AUTH_DB_PASSWORD") ?: "password"
                }

                generator {
                    name = "org.jooq.codegen.DefaultGenerator"

                    database {
                        name = "org.jooq.meta.postgres.PostgresDatabase"
                        inputSchema = "public"
                        includes = ".*"
                    }

                    generate {
                        daos = true
                        records = true
                        fluentSetters = true
                        javaTimeTypes = true
                        deprecated = false
                        pojos = true
                        interfaces = true
                    }

                    target {
                        packageName = "com.jaksimsam1.authservice.infra.persistence.jooq"
                        directory = "build/generated-src/jooq/main"
                    }
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs('src/main/java', "build/generated-src/jooq/main")	// 생성된 코드를 프로젝트 소스로 인식하도로 설정
        }
    }
}

// JOOQ 코드 생성이 컴파일 전에 실행되도록 설정
tasks.named('compileJava').configure {
    it.dependsOn(tasks.named('generateJooq'))
}

tasks.named('compileTestJava').configure {
    it.dependsOn(tasks.named('generateJooq'))
}